################################################################################
# GitLab CI build script for Scala applications published as docker images     #
################################################################################
image: registry.gitlab.com/kpmeen/docker-scala-sbt:scala_2.13.13_jdk21

variables:
  CI: "true"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Setting specific folder for sbt-coursier to cache artifacts
  COURSIER_CACHE: "/root/cache/coursier"
  # Release specific variables
  NEXT_VERSION_SPECIFIER: "v$WS_RELEASE_VERSION"
  WS_NEXT_SNAPSHOT_VERSION: ""
  WS_SKIP_RELEASE_TESTS: "true"

cache:
  untracked: true
  paths:
    - cache

update changelog:
  rules:
    - if: $DO_RELEASE == "true" && $MANUAL_PUBLISH_PAGES != "true" && $TEST_DOCKER_BUILD != "true"
#      when: manual
      when: on_success
      allow_failure: false
    - if: $CI_MERGE_REQUEST_ID
      when: never
  only:
    - master
  stage: prepare-release
  variables:
    GIT_STRATEGY: clone
  before_script:
    # Configure mail and name of the user who should be visible in the commit history
    - git config --global user.email 'release-bot@gitlab.com'
    - git config --global user.name 'Release Bot'
    # Install python3 and pip
    - add-apt-repository ppa:deadsnakes/ppa -y
    - apt-get update
    - apt-get install -y python3.13 python3-pip
    - update-alternatives --install /usr/bin/python python /usr/bin/python3.13 1
    - pip install -U pip
    # Install gitlab-activity for generating changelogs
    - pip install gitlab-activity
  script:
    - echo "Creating new changelog entries for $NEXT_VERSION_SPECIFIER"
    # Generate changelog. Uses $NEXT_VERSION_SPECIFIER to inject the tag information
    - gitlab-activity -t $CI_PROJECT_PATH
    # Remove link from "Contributors" header
    - sed -i 's/#### \[Contributors to this release.*/#### Contributors to this release/g' CHANGELOG.md
    # Print the changelog to be able to manually verify the output
    - cat CHANGELOG.md
    # Add, commit and push the updated CHANGELOG.md file
    - git add CHANGELOG.md
    - git commit -m "Update CHANGELOG.md"
    - git push origin $CI_COMMIT_REF_NAME -o ci.skip # Pushes to the same branch as the trigger

sbt release:
  rules:
    - if: $DO_RELEASE == "true" && $MANUAL_PUBLISH_PAGES != "true" && $TEST_DOCKER_BUILD != "true"
      when: on_success
      allow_failure: false
    - if: $CI_MERGE_REQUEST_ID
      when: never
  only:
    - master
  stage: prepare-release
  needs:
    - update changelog
  before_script:
    # Configure mail and name of the user who should be visible in the commit history
    - git config --global user.email 'release-bot@gitlab.com'
    - git config --global user.name 'Release Bot'
  script:
    - >
      echo "Checking release version..."
      
      if [[ -z $WS_RELEASE_VERSION ]]; then
        echo "Cannot perform release since WS_RELEASE_VERSION is undefined"
        exit 1
      else
        echo "Preparing release of version $WS_RELEASE_VERSION"
      fi
    - >
      echo "Checking SNAPSHOT version..."
      
      if [[ -z $WS_NEXT_SNAPSHOT_VERSION ]]; then
        echo "WS_NEXT_SNAPSHOT_VERSION is undefined, using default (next) version bump."
      else
        echo "Next snapshot version will be ${WS_NEXT_SNAPSHOT_VERSION}-SNAPSHOT"
      fi
    - args_1="release-version $WS_RELEASE_VERSION"
    - args_2=`[[ -z ${WS_NEXT_SNAPSHOT_VERSION} ]] && echo "$args_1" || echo "$args_1 next-version ${WS_NEXT_SNAPSHOT_VERSION}-SNAPSHOT"`
    - release_args=`[[ ${WS_SKIP_RELEASE_TESTS} == "false" ]] && echo "$args_2" || echo "$args_2 skip-tests"`
    - echo "Executing sbt-release process..."
    - sbt "release with-defaults $release_args"
    - git tag
    - cat version.sbt
#    # Push the changes to the master branch and prevent ci from starting (no real changes)
#    - git push origin $CI_COMMIT_REF_NAME -o ci.skip
#    # Push the new release tag
#    - git push origin $NEXT_VERSION_SPECIFIER

